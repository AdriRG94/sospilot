# Example dataflow-C (Assessment Regimes) report generation using Stetl with Jinja2 templating filter.
# The input data comes directly from a WFS providing station info.
# The template file is under the templates folder and global variables (globals.json) are under input.
#
# All rendered output under output/
#
[etl]
chains = input_json|records_to_struct|dataflow-C_template|output_dataflow-C_file
# chains = input_json|records_to_struct|dataflow-C_template|output_std

[input_json]
class = inputs.fileinput.CsvFileInput
file_path = input/rspoor/AssessmentRegimes_NL-005.csv
output_format = record_array
delimiter = ;

# Convert CSV records to struct (dict with array of records)
[records_to_struct]
class = filters.formatconverter.FormatConverter
input_format = record_array
output_format = struct
converter_args = {
    'top_name': 'records'
    }

# Advanced templating with Jinja2
[dataflow-C_template]
class = filters.templatingfilter.Jinja2TemplatingFilter
input_format = struct
template_file = templates/dataflow-C.jinja2
template_globals_path = input/globals-rivm.json

[output_dataflow-C_file]
class = outputs.fileoutput.FileOutput
file_path = output/dataflow-C.xml

# for testing/debugging only
[output_std]
class = outputs.standardoutput.StandardOutput
